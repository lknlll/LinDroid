package com.example.lindroidcode.greendaoatoz.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lindroidcode.greendaoatoz.beans.LongConverter;
import java.util.List;

import com.example.lindroidcode.greendaoatoz.beans.AudioBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUDIO_BEAN".
*/
public class AudioBeanDao extends AbstractDao<AudioBean, Long> {

    public static final String TABLENAME = "AUDIO_BEAN";

    /**
     * Properties of entity AudioBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property LocalPath = new Property(1, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Marks = new Property(2, String.class, "marks", false, "MARKS");
    }

    private final LongConverter marksConverter = new LongConverter();

    public AudioBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AudioBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"LOCAL_PATH\" TEXT," + // 1: localPath
                "\"MARKS\" TEXT);"); // 2: marks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AudioBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
 
        List marks = entity.getMarks();
        if (marks != null) {
            stmt.bindString(3, marksConverter.convertToDatabaseValue(marks));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AudioBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(2, localPath);
        }
 
        List marks = entity.getMarks();
        if (marks != null) {
            stmt.bindString(3, marksConverter.convertToDatabaseValue(marks));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AudioBean readEntity(Cursor cursor, int offset) {
        AudioBean entity = new AudioBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // localPath
            cursor.isNull(offset + 2) ? null : marksConverter.convertToEntityProperty(cursor.getString(offset + 2)) // marks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AudioBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMarks(cursor.isNull(offset + 2) ? null : marksConverter.convertToEntityProperty(cursor.getString(offset + 2)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AudioBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AudioBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AudioBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
